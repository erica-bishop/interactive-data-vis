---
title: "Interactive data visualization using Javascript packages"
format: html
---

# Set up

```{r}
# general use
library(here) # file organization
library(tidyverse) # manipulating
library(sf) # reading in spatial data, etc.
library(janitor) # cleaning variable names
library(lterdatasampler) # data source
library(randomcoloR) # random color generator
library(ggbeeswarm) # beeswarm geoms
library(magick)

# Javascript package wrappers
library(leaflet) # interactive map
library(plotly) # interactive plots
library(ggiraph) # more interactive plots
library(echarts4r) # even more interactive plots
```

# Interactive maps

`leaflet` is the go-to package for interactive maps.
It's not *super* for static maps, but for anyone looking to get an interactive map on their dashboard, this is a great option.
In this example, we're going to use some data from Niwot Ridge LTER to create a map of vegetation classes, snow surveys, pika locations, and landmarks at the site.

Here's some cleaning code (we're not going through this step by step):

```{r clean_data}
# project extent

project_extent <- st_read(here::here("data", "nwt_project_extent", "shapefiles"), layer = "nwt_project_extent") %>% 
  st_transform(crs = 4326)

# snow survey 

snow2018 <- st_read(here::here("data", "ss2018", "shapefiles"), layer = "ss2018") %>% 
  st_transform(crs = 4326) %>% 
  clean_names() %>% 
  mutate(comments = case_when(
    comments == "NaN" ~ "none",
    TRUE ~ comments
  )) %>% 
  mutate(marker_text = paste(
    "Depth:", snowdepth, "<br>",
    "Time:", sampletime, "<br>",
    "Recorders:", recorders, "<br>",
    "Comments:", comments, "<br>"
  )) 

# vegetation classes 

veg <- st_read(here::here("data", "veg", "shapefiles"), layer = "veg") %>% 
  st_transform(crs = 4326) %>% 
  clean_names() %>% 
  mutate(marker_text = paste(
    "Type:", type, "<br>",
    "Area:", area, "<br>",
    "Perimeter:", perimeter, "<br>"
  )) 

# generating random colors for vegetation classes
veg_list <- veg %>% 
  pull(type) %>% 
  unique()

colors <- c(
  "#1c6e73", randomColor(count = 23, luminosity = "random"), "#e3e5e6"
)
veg_pal <- colorFactor(colors, domain = veg$type, ordered = TRUE)

# landmarks 

landmarks <- st_read(here::here("data", "nwt_annotation_pnt", "shapefiles"), layer = "nwt_annotation_pnt") %>% 
  st_transform(crs = 4326) %>% 
  clean_names() %>% 
  mutate(marker_text = paste(
    "Name:", name
  )) 

# pikas

pikas <- st_as_sf(x = nwt_pikas, coords = c("utm_easting", "utm_northing")) %>% 
  st_set_crs("+proj=utm +zone=13 +datum=NAD83 +units=m") %>% 
  st_transform("+proj=longlat +datum=WGS84") %>% 
  mutate(marker_text = paste(
    "Date:", date, "<br>",
    "Station:", station, "<br>",
    "Sex:", sex, "<br>"
  ))
```

And here's a map:

```{r echo=TRUE}

map <- leaflet() |> 
  #add basemap
  addProviderTiles(providers$OpenTopoMap, group = "OpenTopoMap") |> 
  #add map layers: veg boundary and vegetation classes
  addPolygons(data = project_extent, #df with boundaries
              color = "#76e397",
              group = "NNT project extent") |> 
  #veg classes
  addPolygons(
    data = veg, #df with classes
    group = "Vegetation",
    popup = ~marker_text, #saved marker text from above
    fillColor = ~veg_pal(type),
    fillOpacity = 1, #make opaque
    stroke = FALSE #remove boundary strokes to show colors better
  ) |> 
  #add snow survey markers
  addCircleMarkers(
    data = snow2018,
    group = "Snow surveys",
    color = "lightblue",
    stroke = FALSE, #remove outlines
    fillOpacity = 1,
    popup = ~marker_text,
    radius = 2,
    popupOptions = popupOptions(closeOnClick = FALSE) #make markers dissappear 
  ) |> 
  #add landmarks markers
  addCircleMarkers(
    data = landmarks,
    group = "Landmarks", #groups allow you to connect to legends/markers
    color = "yellow",
    stroke = FALSE,
    fillOpacity = 1,
    popup = ~marker_text,
    radius = 2,
    popupOptions = popupOptions(closeOnClick = FALSE)
  ) |> 
  #specify layering order
  addLayersControl(
    baseGroups = c("OpenTopoMap"),
    overlayGroups = c("Niwot project extent", "Snow surveys"),
    options = layersControlOptions(collapsed = TRUE)
  ) |> 
  #add legend for snow surveys
  addLegend(
    values = 1, #first item in legend
    group = "Snow surveys", #specified in addcirclemarkers
    position = "bottomleft",
    labels = "Snow surveys",
    colors = "lightblue",
    opacity = 1
  ) |> 
  #add legend for landmarks
  addLegend(
    values = 2, #second item in legend
    group = "Landmarks",
    position = "bottomleft",
    labels = "Landmarks",
    colors = "yellow",
    opacity = 1
  )


map

```

# Interactive plots

You can build interactivity into your plots using packages that are essentially wrappers for Javascript: you can get an interactive framework without having to learn a whole new language.
We're going to make the following plot interactive:

```{r}
bg_col <- "#232324"
text_col <- "#f2f2f2"
  
weather <- arc_weather %>% 
  mutate(year = lubridate::year(date),
         month = lubridate::month(date),
         day = lubridate::day(date)) %>% 
  mutate(season = case_when(
    month %in% c(12, 1, 2) ~ "winter",
    month %in% c(3, 4, 5) ~ "spring",
    month %in% c(6, 7, 8) ~ "summer",
    month %in% c(9, 10, 11) ~ "fall"
  ),
  season = fct_relevel(season, c("winter", "spring", "summer", "fall"))) %>% 
  mutate(julian = lubridate::yday(date)) %>% 
  mutate(marker_text = paste(
    "Date: ", date, "<br>",
    "Mean air temp (C): ", mean_airtemp, "<br>",
    "Daily precipitation (mm): ", daily_precip, "<br>",
    "Mean windspeed (m/s): ", mean_windspeed, "<br>"
  ))
```

Static plot:

```{r}
weather_static <- ggplot(data = weather, aes(x = julian, y = mean_airtemp, color = mean_airtemp, text = marker_text)) +
  geom_point(alpha = 0.8) +
  scale_color_gradient2(low = "#28ACE6", mid = "#FFFFFF", high = "#C13C31") +
  # scale_color_stepsn(colors = colorRampPalette(c("#cee2f5", "#1e619e"))(31), 
  #                    breaks = seq(1988, 2018, 1)) +
  geom_hline(yintercept = 0, lty = 2, color = text_col, linewidth = 1) +
  scale_x_continuous(expand = c(0, 0), limits = c(0, 366)) +
  scale_y_continuous(expand = c(0, 0), limits = c(-56, 25)) +
  labs(x = "Julian day", y = "degrees Celsius",
       title = "Toolik Field Station is below freezing for most of the year.",
       subtitle = "Each point represents mean air temperature on a given day of the year (Julian day) colored by temperature.") +
  theme_bw() +
  theme(text = element_text(family = "Arial", color = text_col),
        panel.grid = element_blank(),
        # legend.position = "none",
        panel.background = element_rect(fill = bg_col, color = bg_col),
        panel.border = element_blank(),
        plot.background = element_rect(fill = bg_col, color = bg_col),
        axis.text = element_text(color = text_col, size = 14),
        axis.line = element_blank(),
        axis.title = element_text(size = 14),
        axis.ticks = element_blank(),
        plot.title = element_text(size = 20, face = "bold"),
        legend.background = element_rect(fill = bg_col))
weather_static 
```

# Option 1: Turn a `ggplot` object into an interactive graph with `plotly`

The easiest way to build in interactivity is to use `plotly` to get an interactive plot from a `ggplot` object.

```{r}

weather_ggplotly <- ggplotly(weather_static, tooltip = c("text")) |> 
  layout(title = list( #overwrites static ggplot title
    text = paste0(
      "Toolik Field Station is below freezing for most of the year.",
      "<br>", #add html formatting for break
      "<sup>", #indicates subscript formatting
      "Each point represents mean air temperature on a given day of the year (Julian day) colored by temperature.",
      "</sup>" #end sup
    )
  ))

# weather_ggplotly


```

# Option 2: Use `ggiraph`'s unique geoms - wraps R into javascript format
Can add _interactive to ggplot geoms to make them interactive with ggiraph

```{r}
weather_ggiraph <- ggplot(data = weather, aes(x = julian, y = mean_airtemp, color = mean_airtemp, 
                                              tooltip = marker_text, data_id = marker_text)) +
  geom_point_interactive() +
  scale_color_gradient2(low = "#28ACE6", mid = "#FFFFFF", high = "#C13C31") +
  geom_hline(yintercept = 0, lty = 2, color = "#C13C31", linewidth = 2) +
  scale_x_continuous(expand = c(0, 0), limits = c(0, 366)) +
  scale_y_continuous(expand = c(0, 0), limits = c(-56, 25)) +
  labs(x = "Julian day", y = "degrees Celsius",
       title = "Toolik Field Station is below freezing for most of the year.",
       subtitle = "Each point represents mean air temperature on a given day of the year (Julian day) colored by temperature.") +
  theme_bw() +
  theme(text = element_text(family = "Garamond", color = text_col),
        panel.grid = element_blank(),
        legend.position = "none",
        panel.background = element_rect(fill = bg_col, color = bg_col),
        panel.border = element_blank(),
        plot.background = element_rect(fill = bg_col, color = bg_col),
        axis.text = element_text(color = text_col, size = 14),
        axis.line = element_blank(),
        axis.title = element_text(size = 14),
        axis.ticks = element_blank(),
        plot.title = element_text(size = 20, face = "bold"),
        legend.background = element_rect(fill = bg_col))

#now make it into an interactive object:
weather_ggiraph_interactive <- girafe(
  ggobj = weather_ggiraph,
  width = 8, height = 5,
  # bg = bg_col,
  options = list(
    opts_tooltip(
      opacity = 0.8, use_fill = TRUE,
      use_stroke = FALSE, 
      css = "padding:5pt;font-family: Garamond;font-size:1rem;color:white"),
    opts_hover_inv(css = "opacity:0.4"),
    opts_selection(
      type = "multiple",
      only_shiny = FALSE
    )
  )
)

weather_ggiraph_interactive

```

# Option 3: `echarts4r`

This is the most complicated option - the documentation is fairly minimal.
However, it's cool.

```{r}

airtemp_echart4r <-
  weather |> 
  group_by(year) |> #groupby year allows timeline function
  e_charts(x = julian, timeline = TRUE) |> #add timeline
  e_timeline_opts()
  e_scatter(serie = mean_airtemp) |> 
  e_visual_map( #controls aesthetics to manipulate
    min = -54, max = 21, #temp range
  ) 

airtemp_echart4r






```
